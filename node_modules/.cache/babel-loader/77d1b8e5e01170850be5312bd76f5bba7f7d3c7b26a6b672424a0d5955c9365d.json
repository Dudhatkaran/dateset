{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karan\\\\OneDrive\\\\Desktop\\\\country\\\\countrydata\\\\data\\\\src\\\\component\\\\datas\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./Data.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Data = () => {\n  _s();\n  // const [data, setData] = useState([]);\n  // const [name, setName] = useState(\"\");\n  // const [username, setUsername] = useState(\"\");\n  // const [email, setEmail] = useState(\"\");\n  // const [userId, setuserId] = useState(null);\n\n  // useEffect(() => {\n  //     fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //         .then(response => {\n  //             return response.json()\n  //         })\n  //         .then(data => {\n  //             setData(data)\n  //             setName(data[0].name)\n  //             setUsername(data[0].username)\n  //             setEmail(data[0].email)\n  //             setuserId(data[0].id)\n  //         })\n  // }, []);\n\n  // function deleteUser(id) {\n  //     fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n  //         method: \"DELETE\"\n  //     }).then((response) => {\n  //         response.json()\n  //             .then((response) => {\n  //                 console.log(response);\n  //             })\n  //     })\n  // }\n\n  // function seleteUser(id) {\n  //     let item = data[id - 1];\n  //     setName(item.name);\n  //     setUsername(item.username);\n  //     setEmail(item.email);\n  //     setuserId(item.id);\n  // }\n\n  // function updateUser() {\n  //     let item = { name, username, email }\n  //     // console.log('item::: ', item);\n  //     fetch(`https://jsonplaceholder.typicode.com/users/${userId}`, {\n  //         method: \"PUT\",\n  //         headers: {\n  //             'Accept': 'application/json',\n  //             'Content-type': 'application/json',\n  //         },\n  //         body: JSON.stringify(item)\n  //     }).then((response) => {\n  //         response.json()\n  //             .then((response) => {\n  //                 console.log(response);\n  //             })\n  //     })\n  // }\n\n  const [todos, setTodos] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleAddTodo = () => {\n    if (inputValue.trim() !== '') {\n      const newTodo = {\n        id: Date.now(),\n        text: inputValue,\n        completed: false\n      };\n      setTodos([...todos, newTodo]);\n      setInputValue('');\n    }\n  };\n  const handleToggleComplete = id => {\n    const updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        };\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n  const handleRemoveTodo = id => {\n    const updatedTodos = todos.filter(todo => todo.id !== id);\n    setTodos(updatedTodos);\n  };\n  return (\n    /*#__PURE__*/\n    // <>\n    //     <table border=\"1\">\n    //         <tr>\n    //             <td>id</td>\n    //             <td>name</td>\n    //             <td>username</td>\n    //             <td>email</td>\n    //         </tr>\n    //         {\n    //             data.map((item) =>\n    //                 <tr>\n    //                     <td>{ item.id }</td>\n    //                     <td>{ item.name }</td>\n    //                     <td>{ item.username }</td>\n    //                     <td>{ item.email }</td>\n    //                     <td><button onClick={ () => seleteUser(item.id) }>update</button></td>\n    //                     <td><button onClick={ () => deleteUser(item.id) }>delete</button></td>\n    //                 </tr>\n    //             )\n    //         }\n    //     </table>\n    //     <div>\n    //         <input type=\"text\" value={ name } onChange={ (e) => { setName(e.target.value) } } /> <br />\n    //         <input type=\"text\" value={ username } onChange={ (e) => { setUsername(e.target.value) } } /> <br />\n    //         <input type=\"text\" value={ email } onChange={ (e) => { setEmail(e.target.value) } } /> <br />\n    //         <button onClick={ updateUser }>update user</button>\n    //     </div>\n    // </>\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Todo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleInputChange,\n          placeholder: \"Enter a new todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddTodo,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: todo.completed ? 'completed' : '',\n              onClick: () => handleToggleComplete(todo.id),\n              children: todo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveTodo(todo.id),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)]\n          }, todo.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n};\n_s(Data, \"+Sy7uGGPQnt+jjrIizbpp5oDotQ=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Data","_s","todos","setTodos","inputValue","setInputValue","handleInputChange","event","target","value","handleAddTodo","trim","newTodo","id","Date","now","text","completed","handleToggleComplete","updatedTodos","map","todo","handleRemoveTodo","filter","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/karan/OneDrive/Desktop/country/countrydata/data/src/component/datas/Data.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport \"./Data.css\";\r\n\r\nconst Data = () => {\r\n\r\n    // const [data, setData] = useState([]);\r\n    // const [name, setName] = useState(\"\");\r\n    // const [username, setUsername] = useState(\"\");\r\n    // const [email, setEmail] = useState(\"\");\r\n    // const [userId, setuserId] = useState(null);\r\n\r\n    // useEffect(() => {\r\n    //     fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //         .then(response => {\r\n    //             return response.json()\r\n    //         })\r\n    //         .then(data => {\r\n    //             setData(data)\r\n    //             setName(data[0].name)\r\n    //             setUsername(data[0].username)\r\n    //             setEmail(data[0].email)\r\n    //             setuserId(data[0].id)\r\n    //         })\r\n    // }, []);\r\n\r\n    // function deleteUser(id) {\r\n    //     fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\r\n    //         method: \"DELETE\"\r\n    //     }).then((response) => {\r\n    //         response.json()\r\n    //             .then((response) => {\r\n    //                 console.log(response);\r\n    //             })\r\n    //     })\r\n    // }\r\n\r\n    // function seleteUser(id) {\r\n    //     let item = data[id - 1];\r\n    //     setName(item.name);\r\n    //     setUsername(item.username);\r\n    //     setEmail(item.email);\r\n    //     setuserId(item.id);\r\n    // }\r\n\r\n    // function updateUser() {\r\n    //     let item = { name, username, email }\r\n    //     // console.log('item::: ', item);\r\n    //     fetch(`https://jsonplaceholder.typicode.com/users/${userId}`, {\r\n    //         method: \"PUT\",\r\n    //         headers: {\r\n    //             'Accept': 'application/json',\r\n    //             'Content-type': 'application/json',\r\n    //         },\r\n    //         body: JSON.stringify(item)\r\n    //     }).then((response) => {\r\n    //         response.json()\r\n    //             .then((response) => {\r\n    //                 console.log(response);\r\n    //             })\r\n    //     })\r\n    // }\r\n\r\n\r\n    const [todos, setTodos] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleAddTodo = () => {\r\n        if (inputValue.trim() !== '') {\r\n            const newTodo = {\r\n                id: Date.now(),\r\n                text: inputValue,\r\n                completed: false\r\n            };\r\n\r\n            setTodos([...todos, newTodo]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    const handleToggleComplete = (id) => {\r\n        const updatedTodos = todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                return {\r\n                    ...todo,\r\n                    completed: !todo.completed\r\n                };\r\n            }\r\n            return todo;\r\n        });\r\n\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    const handleRemoveTodo = (id) => {\r\n        const updatedTodos = todos.filter((todo) => todo.id !== id);\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        // <>\r\n        //     <table border=\"1\">\r\n        //         <tr>\r\n        //             <td>id</td>\r\n        //             <td>name</td>\r\n        //             <td>username</td>\r\n        //             <td>email</td>\r\n        //         </tr>\r\n        //         {\r\n        //             data.map((item) =>\r\n        //                 <tr>\r\n        //                     <td>{ item.id }</td>\r\n        //                     <td>{ item.name }</td>\r\n        //                     <td>{ item.username }</td>\r\n        //                     <td>{ item.email }</td>\r\n        //                     <td><button onClick={ () => seleteUser(item.id) }>update</button></td>\r\n        //                     <td><button onClick={ () => deleteUser(item.id) }>delete</button></td>\r\n        //                 </tr>\r\n        //             )\r\n        //         }\r\n        //     </table>\r\n\r\n        //     <div>\r\n        //         <input type=\"text\" value={ name } onChange={ (e) => { setName(e.target.value) } } /> <br />\r\n        //         <input type=\"text\" value={ username } onChange={ (e) => { setUsername(e.target.value) } } /> <br />\r\n        //         <input type=\"text\" value={ email } onChange={ (e) => { setEmail(e.target.value) } } /> <br />\r\n        //         <button onClick={ updateUser }>update user</button>\r\n        //     </div>\r\n        // </>\r\n\r\n        <>\r\n            <div className=\"todo-list\">\r\n                <h2>Todo List</h2>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                    placeholder=\"Enter a new todo\"\r\n                />\r\n                <button onClick={ handleAddTodo }>Add</button>\r\n\r\n                <ul>\r\n                    { todos.map((todo) => (\r\n                        <li key={ todo.id }>\r\n                            <span\r\n                                className={ todo.completed ? 'completed' : '' }\r\n                                onClick={ () => handleToggleComplete(todo.id) }\r\n                            >\r\n                                { todo.text }\r\n                            </span>\r\n                            <button onClick={ () => handleRemoveTodo(todo.id) }>Remove</button>\r\n                        </li>\r\n                    )) }\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Data"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}