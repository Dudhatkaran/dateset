{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karan\\\\OneDrive\\\\Desktop\\\\country\\\\countrydata\\\\data\\\\src\\\\component\\\\task\\\\Task.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Task = () => {\n  _s();\n  // const name = [\"Karan\", \"alpesh\", \"harsh\", \"aniket\", \"jay\"]\n  // const all = name.length\n\n  // const [all, setAll] = useState()\n  // const [count, setCount] = useState(initialState)\n\n  // function changeValue() {\n  //     document.getElementById('type').value = name;\n  // }\n\n  const [data, setData] = useState(['Value 1', 'Value 2', 'Value 3']);\n  const handleChangeValue = index => {\n    const newData = [...data]; // Create a copy of the original array\n    newData[index] = 'New Value'; // Update the value at the specified index\n    setData(newData); // Update the state with the modified array\n  };\n\n  return (\n    /*#__PURE__*/\n    // <>\n    //     <div>\n    //         <input type=\"text\" id=\"type\" name=\"type\" value=\"change\" />\n    //         <button onClick={ changeValue }>change</button>\n    //     </div>\n    // </>\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleChangeValue(index),\n            children: \"Change Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n};\n_s(Task, \"zUUB9l/hZloxfY2TbTG/CR6WPQI=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Task","_s","data","setData","useState","handleChangeValue","index","newData","children","map","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/karan/OneDrive/Desktop/country/countrydata/data/src/component/task/Task.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Task = () => {\r\n\r\n    // const name = [\"Karan\", \"alpesh\", \"harsh\", \"aniket\", \"jay\"]\r\n    // const all = name.length\r\n\r\n    // const [all, setAll] = useState()\r\n    // const [count, setCount] = useState(initialState)\r\n\r\n    // function changeValue() {\r\n    //     document.getElementById('type').value = name;\r\n    // }\r\n\r\n    const [data, setData] = useState(['Value 1', 'Value 2', 'Value 3']);\r\n\r\n    const handleChangeValue = (index) => {\r\n        const newData = [...data]; // Create a copy of the original array\r\n        newData[index] = 'New Value'; // Update the value at the specified index\r\n        setData(newData); // Update the state with the modified array\r\n    };\r\n\r\n    return (\r\n        // <>\r\n        //     <div>\r\n        //         <input type=\"text\" id=\"type\" name=\"type\" value=\"change\" />\r\n        //         <button onClick={ changeValue }>change</button>\r\n        //     </div>\r\n        // </>\r\n\r\n        <>\r\n            <div>\r\n                { data.map((value, index) => (\r\n                    <div key={ index }>\r\n                        <span>{ value }</span>\r\n                        <button onClick={ () => handleChangeValue(index) }>Change Value</button>\r\n                    </div>\r\n                )) }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;EAEnE,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACjC,MAAMC,OAAO,GAAG,CAAC,GAAGL,IAAI,CAAC,CAAC,CAAC;IAC3BK,OAAO,CAACD,KAAK,CAAC,GAAG,WAAW,CAAC,CAAC;IAC9BH,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IAEAV,OAAA,CAAAE,SAAA;MAAAS,QAAA,eACIX,OAAA;QAAAW,QAAA,EACMN,IAAI,CAACO,GAAG,CAAC,CAACC,KAAK,EAAEJ,KAAK,kBACpBT,OAAA;UAAAW,QAAA,gBACIX,OAAA;YAAAW,QAAA,EAAQE;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtBjB,OAAA;YAAQkB,OAAO,EAAGA,CAAA,KAAMV,iBAAiB,CAACC,KAAK,CAAG;YAAAE,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAFjER,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGX,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC,gBACR;EAAC;AAEX,CAAC;AAAAb,EAAA,CAvCKD,IAAI;AAAAgB,EAAA,GAAJhB,IAAI;AAyCV,eAAeA,IAAI;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}